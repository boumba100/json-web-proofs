



todo                                                           J. Miller
                                                           Ping Identity
                                                         2 November 2021


                         JSON Proof Algorithms
                  draft-jmiller-json-proof-algorithms

Abstract

   The JSON Proof Algorithms (JPA) specification registers cryptographic
   algorithms and identifiers to be used with the JSON Web Proof (JWP)
   and JSON Web Key (JWK) specifications.  It defines several IANA
   registries for these identifiers.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Background
   4.  Algorithm Basics
     4.1.  Sign
     4.2.  Verify Signature
     4.3.  Prove
     4.4.  Verify Proof
   5.  Security Considerations
   6.  IANA Considerations
   7.  Normative References
   8.  Informative References
   Author's Address

1.  Introduction

   The JSON Web Proof (JWP) draft establishes a new secure container
   format that supports selective disclosure and unlinkability using
   Zero-Knowledge Proofs (ZKPs) or other newer cryptographic algorithms.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Background

   JWP defines a clean abstraction around the parts of a container
   binding together a protected header and one or more payloads.  It
   does not define any details about the interactions between an
   application and the cryptographic libraries that implement proof-
   supporting algorithms.

   Due to the nature of ZKPs, this specification also documents the
   subtle but important differences in proof algorithms versus those
   defined by the JSON Web Algorithms RFC.  These changes help support
   more advanced capabilities such as blinded signatures and predicate
   proofs.

4.  Algorithm Basics

   The four principle interactions that every proof algorithm MUST
   support are sign, verify_signature, prove, and verify_proof.

   Some algorithms MAY also support two additional interactions of
   request_signature and request_proof.  While these do not use a JWP
   container as input or output, they are included here in order to
   maximize interoperability across proof algorithm implementations.

4.1.  Sign

   The JWP is first created as the output of a proof algorithm's sign
   operation.

   TODO: * MUST support the protected header as an octet string * MUST
   support one or more payloads, each as an octet string * MAY support
   the output of the request_signature operation from the requesting
   party * MAY support signing hidden payloads with no octet string *
   MUST include integrity protection for the header and all payloads,
   specify all digest and hash2curve methods

4.2.  Verify Signature

   Performed by the requesting party to verify the newly signed JWP.

   TODO: * MAY support local state from the request_signature operation
   * MAY return a modified JWP for serialized storage without the local
   state * MAY support verifying any hidden payloads

4.3.  Prove

   Used to apply any selective disclosure preferences and perform any
   unlinkability transformations.

   TODO: * MAY support the output of the request_proof operation from
   the requesting party * MUST support ability to hide any payload *
   MUST always include the protected header * MAY add/append new
   payloads * MAY replace the proof value * MUST indicate if the input
   JWP is able to be used again * MAY support an input JWP that resulted
   from a previous prove operation

4.4.  Verify Proof

   Performed by the requesting party on a JWP to verify any revealed
   payloads and/or assertions about them from the proving party, while
   also verifying they are the same payloads and ordering as witnessed
   by the signing party.

   TODO: * MUST verify the integrity of all revealed payloads * MUST
   verify any included assertions about a hidden payload as true * MAY
   support local state from the request_proof operation * Out of scope
   is app interface to interact with the resulting verified assertions
   (may also be part of the request proof state) * MAY indicate if the
   JWP can be re-used to generate a new proof

5.  Security Considerations

   *  Data minimization of the proof value

   *  Unlinkability

6.  IANA Considerations

   This document has no IANA actions.

7.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

8.  Informative References

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

Author's Address

   Jeremie Miller
   Ping Identity

   Email: jmiller@pingidentity.com
